import networkx as nx
import numpy as np

# Sample input data
input_data = [
    (1, 1, 2, 2.5, 2.5, 0.15, 4, 200),
    (2, 1, 3, 2.5, 2.5, 0.15, 4, 150),
    (3, 2, 3, 0.5, 0.5, 0.15, 4, 100),
    (4, 2, 4, 2.5, 2.5, 0.15, 4, 100),
    (5, 2, 5, 2.5, 2.5, 0.15, 4, 150),
    (6, 3, 4, 2, 2, 0.15, 4, 100),
    (7, 3, 5, 2.5, 2.5, 0.15, 4, 100),
    # Add more data as needed
]

def create_graph(input_data):
    G = nx.DiGraph()
    for link_num, a_node, b_node, time, fftt, al, bata, cap in input_data:
        G.add_edge(a_node, b_node, link_number=link_num, time=time, fftt=fftt, al=al, bata=bata, cap=cap)
    return G

# Create a directed graph
G = create_graph(input_data)

# Define start and end nodes
start = 1
end = [4, 5]  # Two end nodes

# Define demand for each end node
end_demand = {4: 125, 5: 100}

# Get all link numbers from input data
all_link_numbers = [link_num for link_num, _, _, _, _, _, _, _ in input_data]

# Shortest path from node start to each end node
shortest_paths = []
for e in end:
    shortest_paths.append(nx.shortest_path(G, source=start, target=e, weight='time'))

# Get the link numbers in the shortest paths
shortest_path_link_numbers = []
for path in shortest_paths:
    path_link_numbers = [G[path[i]][path[i + 1]]['link_number'] for i in range(len(path) - 1)]
    shortest_path_link_numbers.append(path_link_numbers)

print("Iteration: 1")
for i, path in enumerate(shortest_paths):
    print(f"Shortest path to end node {end[i]}:", path)
print("Link numbers in the shortest paths:", shortest_path_link_numbers)


# Direction finding
def DF(input_data, shortest_path_link_numbers, end_demand):
    num_link_number = max(max(all_link_numbers), max(max(shortest_path_link_numbers)))
    Y = np.zeros(num_link_number)  # Initialize array Y with zeros
    for i, path_link_numbers in enumerate(shortest_path_link_numbers):
        Demand = end_demand[end[i]]
        for link_number in path_link_numbers:
            Y[link_number - 1] += Demand  # Add demand to links in the shortest path
    return Y


def update_time(input_data, X):
    updated_data = []
    for link_num, a_node, b_node, time, fftt, al, bata, cap in input_data:
        updated_time = fftt * (1 + al * (X[link_num - 1] / cap) ** bata)
        updated_data.append((link_num, a_node, b_node, updated_time, fftt, al, bata, cap))
    return updated_data


# Call the function with both arguments and print the result
X = DF(input_data, shortest_path_link_numbers, end_demand)
print("Array Y:", X)


# Calculate X using a new function
def calculate_X(input_data, shortest_path_link_numbers, all_link_numbers, end_demand):
    num_link_number = max(max(all_link_numbers), max(max(shortest_path_link_numbers)))
    X = np.zeros(num_link_number)  # Initialize array X with zeros
    for i, path_link_numbers in enumerate(shortest_path_link_numbers):
        Demand = end_demand[end[i]]
        for link_number in path_link_numbers:
            X[link_number - 1] += Demand  # Add demand to links in the shortest path
    return X


# Call the function with all required arguments and print the result
X_new = calculate_X(input_data, shortest_path_link_numbers, all_link_numbers, end_demand)
print("Array X (new):", X_new)

updated_input_data = update_time(input_data, X_new)
print("Updated Input Data:", updated_input_data)

# Create a directed graph with the updated time values
G_updated = nx.DiGraph()

# Add edges with updated time values
for link_num, a_node, b_node, updated_time, fftt, al, bata, cap in updated_input_data:
    G_updated.add_edge(a_node, b_node, link_number=link_num, time=updated_time, fftt=fftt, al=al, bata=bata, cap=cap)

# Find the shortest path in the updated graph
shortest_paths_updated = []
for e in end:
    shortest_paths_updated.append(nx.shortest_path(G_updated, source=start, target=e, weight='time'))

# Get the link numbers in the updated shortest paths
shortest_path_link_numbers_updated = []
for path in shortest_paths_updated:
    path_link_numbers_updated = [G_updated[path[i]][path[i + 1]]['link_number'] for i in range(len(path) - 1)]
    shortest_path_link_numbers_updated.append(path_link_numbers_updated)

print("Link numbers in the updated shortest paths:", shortest_path_link_numbers_updated)

# Direction finding for updated Y
Y_updated = DF(updated_input_data, shortest_path_link_numbers_updated, end_demand)

# Golden section search
def golden_section(Z, a, b, tol=1e-3):
    r = 0.61803333

    # Initial points
    XL = (b - a) * (1 - r) + a
    XR = (b - a) * r + a

    iteration = 1

    while (b - a) > 2 * tol:
        if Z(XL) <= Z(XR):
            b = XR
            XR = XL
            XL = (b - a) * (1 - r) + a
        else:
            a = XL
            XL = XR
            XR = (b - a) * r + a

        iteration += 1

    # Return the midpoint of the final interval as the result
    return (a + b) / 2, a, b, iteration


# Integration function for Alpha2
def integrate_BPRF_combined(Alpha2_value, X, Y):
    sum_integrate_BPRF = 0

    for item, flow in zip(updated_input_data, Y):
        link_num, _, _, _, fftt, alpha, cap, beta = item
        sum_integrate_BPRF += (
            fftt * (X[link_num - 1] + Alpha2_value * (flow - X[link_num - 1]))
            + (alpha / ((beta + 1) * (cap ** beta)))
            * fftt * ((X[link_num - 1] + Alpha2_value * (flow - X[link_num - 1])) ** (beta + 1))
        )

    return sum_integrate_BPRF


# Update X, Y function
def update_XY(al_2, X, Y):
    X_updated = [X[i] + al_2 * (Y[i] - X[i]) for i in range(len(X))]
    return X_updated


# Golden Section Search for al_2 in 10 loops
iteration = 2
for i in range(2, 3):
    if iteration != 2:
        print("Previous Array X:", X_new)
        print("Previous Array Y:", Y_updated)
    current_iteration = i  # Use the loop variable for the iteration count

    # Update Y_updated using the new X_new
    Y_updated = DF(updated_input_data, shortest_path_link_numbers_updated, end_demand)
    if iteration == 2:
        print("Array Y (new):", Y_updated)

    # Golden Section Search for al_2
    alpha2_result, a, b, _ = golden_section(
        lambda al_2: integrate_BPRF_combined(al_2, X_new, Y_updated), 0, 1, tol=0.001
    )

    # Print intermediate values
    print(f"Iteration: {current_iteration}, Alpha2: {alpha2_result}, a: {a}, b: {b}", "(a+b)/2 =", (a+b)/2, "Z =", integrate_BPRF_combined(alpha2_result, X_new, Y_updated))

    # Final al_2 Result
    print(f"\nFinal al_2 Result: {alpha2_result}")

    # Update Y_updated using the new X_new
    Y_updated = DF(updated_input_data, shortest_path_link_numbers_updated, end_demand)

    # Update X_new using the final alpha2_result
    X_updated = update_XY(alpha2_result, X_new, Y_updated)
    print("Updated Array X:", X_updated)
    X_new = X_updated

    updated_input_data = update_time(input_data, X_new)
    print("Updated Input Data:", updated_input_data)

    # Get the link numbers in the updated shortest path
    shortest_paths_updated = []
    for e in end:
        shortest_paths_updated.append(nx.shortest_path(G_updated, source=start, target=e, weight='time'))

    shortest_path_link_numbers_updated = []
    for path in shortest_paths_updated:
        path_link_numbers_updated = [G_updated[path[i]][path[i + 1]]['link_number'] for i in range(len(path) - 1)]
        shortest_path_link_numbers_updated.append(path_link_numbers_updated)

    print("Link numbers in the updated shortest paths:", shortest_path_link_numbers_updated)

    # Direction finding for updated Y
    Y_updated = DF(updated_input_data, shortest_path_link_numbers_updated, end_demand)
    print("Updated Array Y:", Y_updated)
    if iteration == 11:
        break
    # Print the current iteration number
    print("\n", "iteration:", current_iteration)
    iteration += 1
